Blueprint

Description

APP NAME: SOLOME
This app is making it easier for LOLers to have sick experience
when soloing each anther player.

Use Case:

User A will challenge User B in the game via message (PM), User A creates
an DUO Challenge using the APP by entering his username and email, and the
other person's username and email, then both party will complete a prize pool
by using one of the following payment methods:

1) RP redeemable code
2) Paypal (fuck yeah I like the smell of the money)

Design? Sudo Code:

-1. one of the users needs to create this SOLOME challenge page by inputting
both players username, region and email, then wait for the system to confirm eligibility;

Needed Endpoint:
https://na.api.pvp.net/api/lol/na/v1.4/summoner/by-name/JasonStathan?api_key=753c0e9e-df6c-4206-94fb-ee1309467e7d

Needed Payload:
var data = {
  username: name,
  region: region,
  email: email
}

Response Outputs:
Var response =
{"jasonstathan": {
   "id": 24894460,
   "name": "JasonStathan",
   "profileIconId": 23,
   "revisionDate": 1461809172000,
   "summonerLevel": 30
}}

    -1.1 the system will do a raw data check on the inputs {region}

    if (player1_region !== player2_region) {
      notification("You can be matched because you ain't even on the same server!, warning")
    };

    -1.2 the system will then compare player_level to see whether this will be a fair game

    if (player1_level !== player2_level) {
      adjustRewardRatio(player1, player2);
    };

    -1.3 the system then will send out an challenge email notify both users regarding the upcoming
    match with the payout ratio. The email needs to be verified to receive the reward.

        function SendEmail('email');
        probably use a library that does that...
        I might do this at the very last step
        because it's non-trial to the core function for [devMode].

------------------------------------------------------------------------------------------------------------
-2.  choose a challenge type, whether is

      1) friendly
        1.1) log the the SOLOME match outcome into db.[matches] where it stores all public matches and outcomes
             no further development needed to be done here.

      2) lol giftcard
        1.1) it will prompt both users to purchase a gift card of equivalent amount using paypal,
              and [winner takes all].

            [problem]: Moral Risk too high, what if some kid just redeemed his portion of the redeemable gift card?
             so no matter who wins, the guy is not gonna get his double reward for a [winners take all game].

        1.2) this is probably not gonna work out unless a good solution comes out!

      3) money, paypal
        1.1) use Node.js SDK from paypal-rest-sdk, look through the documentation.

        "I think it's doable?""


-2.5 select a SOLO rule

      Select Win Conditions
      1) First Blood
      2) First Turret

      This part determines how the payout is gonna be!

      Later Needs To Call this function
      function checkCondition(MatchID) {
      ...
      };

------------------------------------------------------------------------------------------------------------
-3.  payment set! Now shall we start the SOLOME challenge?

     -3.1 Now system will prompt user to leave the [spectator mode] on so it can
     make API calls against [Current-Game] endpoint.

     Needed Endpoint:
     https://na.api.pvp.net/observer-mode/rest/consumer/getSpectatorGameInfo/NA1/24894460?api_key=753c0e9e-df6c-4206-94fb-ee1309467e7d

     Needed Payload:
     var data = {
          platformId: platform,
          summonerId: summonerId
     }

     response outputs:
     var response = {
          too long..
     }

          -3.1.1 call this function on a loop from the server end to detect when
          game starts.

          getSpectatorGameInfo = function getSpectatorGameInfo(data);
          callback function,
          if (!data) {
            server.send("game hasn't started yet!")
          } else {
            server.send(response) //send the response back to the front-end so it updates.
          }

     -3.2 Once the game starts, it will check the SOLOME contester

            a) whether it's a BOT
            b) whether the name matches

            checkPlayers = (response.participants == player1);
            checkPlayers = (response.participants == player2);

     -3.3 After the first success 200 return of the [Current-Game] API call

          -3.3.1 it will trigger a scheduled event that checks the match.



------------------------------------------------------------------------------------------------------------

-4. Check game outcome;
    Following up the step 2.5:
    We will then use this function we have written:

    calling agains this endpoint:
    [match] /endpoints

    Needed Payload:
    var data  = {
      region: region,
      matchId: matchId
    }

    Once get response

    Needs these two data:

    firstTower	boolean	Flag indicating whether or not the team destroyed the first tower
    firstBlood	boolean	Flag indicating whether or not the team got first blood

    function checkCondition(MatchID) {
    ...
      ...
          call up another function here, maybe as the callback function?
          awardWinner(winner, email);
    return winner
    };



@FRIDAY 2:24am, April 28th
    -NOTE: NEW FEATURE

Try to figure out a formula for MMR rating on soloing skills

Algo Thought:

"Goal is to recreate a normDistribution curve where let average player to be average
and exceptional player needs to win game to get into the top 10 percentile."

MMR = sum(baseScore * 60%, expScore * 5%, soloScore * 35%);
"NOTE: 3 components with respective weights"

baseScore = sum(mostPlayedChampion1 * w(mostPlayerChampion1) + ..... mostPlayedChampionN * w(mostPlayerChampionN))
baseScore = (min, max) --> (0%, 60%);

expScore = totalGamePlayed (should I use this? better idea?)
expScore = (min, max) --> (0%, 5%);

soloScore = soloWinRate * lamda(probably a sigmoid function) + sum(mostPlayedChampion1 * w(mostPlayerChampion1) + ..... mostPlayedChampionN * w(mostPlayerChampionN))
expScore = (min, max) --> (0%, 35%)
'NOTE: sigmoid function normalises the winrate, which means you need at least 5 - 6 games before this scales up.
Otherwise soloScore is minuscule '
